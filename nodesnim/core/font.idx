StyleUnicode	nodesnim/core/font.html#StyleUnicode	font: StyleUnicode	
StyleText	nodesnim/core/font.html#StyleText	font: StyleText	
schar	nodesnim/core/font.html#schar,string,ColorRef,cint,bool	font: schar(c: string; color: ColorRef = nil; style: cint = TTF_STYLE_NORMAL;\n      is_url: bool = false): StyleUnicode	
stext	nodesnim/core/font.html#stext,string,ColorRef,cint	font: stext(text: string; color: ColorRef = nil; style: cint = TTF_STYLE_NORMAL): StyleText	
len	nodesnim/core/font.html#len,StyleText	font: len(text: StyleText): int	
`$`	nodesnim/core/font.html#$,StyleUnicode	font: `$`(c: StyleUnicode): string	
`$`	nodesnim/core/font.html#$,StyleText	font: `$`(text: StyleText): string	
`&amp;`	nodesnim/core/font.html#&,StyleText,StyleUnicode	font: `&amp;`(text: StyleText; c: StyleUnicode): StyleText	
`&amp;`	nodesnim/core/font.html#&,StyleText,StyleText	font: `&amp;`(text, t: StyleText): StyleText	
`&amp;`	nodesnim/core/font.html#&,StyleText,string	font: `&amp;`(text: StyleText; t: string): StyleText	
`&amp;`	nodesnim/core/font.html#&,string,	font: `&amp;`(text: string; c: StyleUnicode | StyleText): string	
`&amp;=`	nodesnim/core/font.html#&=,StyleText,	font: `&amp;=`(text: var StyleText; c: StyleUnicode | StyleText)	
`&amp;=`	nodesnim/core/font.html#&=,string,	font: `&amp;=`(text: var string; c: StyleUnicode | StyleText)	
`&amp;=`	nodesnim/core/font.html#&=,StyleText,string	font: `&amp;=`(text: var StyleText; t: string)	
`[]`	nodesnim/core/font.html#[],StyleText,	font: `[]`(text: StyleText; index: int | BackwardsIndex): StyleUnicode	
`[]`	nodesnim/core/font.html#[],StyleText,HSlice[T,U]	font: `[]`[T, U](text: StyleText; slice: HSlice[T, U]): StyleText	
`==`	nodesnim/core/font.html#==,StyleUnicode,StyleUnicode	font: `==`(x, y: StyleUnicode): bool	
`==`	nodesnim/core/font.html#==,StyleText,StyleText	font: `==`(x, y: StyleText): bool	
applyStyle	nodesnim/core/font.html#applyStyle,StyleUnicode,cint,bool	font: applyStyle(symbol: StyleUnicode; style: cint; enabled: bool = true)	
clear	nodesnim/core/font.html#clear,StyleText	font: clear(text: StyleText)	
toUpper	nodesnim/core/font.html#toUpper,StyleText	font: toUpper(text: StyleText): StyleText	
toLower	nodesnim/core/font.html#toLower,StyleText	font: toLower(text: StyleText): StyleText	
setColor	nodesnim/core/font.html#setColor,StyleUnicode,ColorRef	font: setColor(c: StyleUnicode; color: ColorRef)	
setColor	nodesnim/core/font.html#setColor,StyleText,ColorRef	font: setColor(text: StyleText; color: ColorRef)	
setColor	nodesnim/core/font.html#setColor,StyleText,int,ColorRef	font: setColor(text: StyleText; index: int; color: ColorRef)	
setColor	nodesnim/core/font.html#setColor,StyleText,int,int,ColorRef	font: setColor(text: StyleText; s, e: int; color: ColorRef)	
setNormal	nodesnim/core/font.html#setNormal,StyleUnicode,bool	font: setNormal(c`gensym4: StyleUnicode; val`gensym4: bool = true)	
setNormal	nodesnim/core/font.html#setNormal,StyleText,bool	font: setNormal(text`gensym4: StyleText; val`gensym4: bool)	
setNormal	nodesnim/core/font.html#setNormal,StyleText,int,bool	font: setNormal(text`gensym4: StyleText; index`gensym4: int; val`gensym4: bool)	
setNormal	nodesnim/core/font.html#setNormal,StyleText,int,int,bool	font: setNormal(text`gensym4: StyleText; s`gensym4, e`gensym4: int; val`gensym4: bool)	
setBold	nodesnim/core/font.html#setBold,StyleUnicode,bool	font: setBold(c`gensym5: StyleUnicode; val`gensym5: bool = true)	
setBold	nodesnim/core/font.html#setBold,StyleText,bool	font: setBold(text`gensym5: StyleText; val`gensym5: bool)	
setBold	nodesnim/core/font.html#setBold,StyleText,int,bool	font: setBold(text`gensym5: StyleText; index`gensym5: int; val`gensym5: bool)	
setBold	nodesnim/core/font.html#setBold,StyleText,int,int,bool	font: setBold(text`gensym5: StyleText; s`gensym5, e`gensym5: int; val`gensym5: bool)	
setItalic	nodesnim/core/font.html#setItalic,StyleUnicode,bool	font: setItalic(c`gensym6: StyleUnicode; val`gensym6: bool = true)	
setItalic	nodesnim/core/font.html#setItalic,StyleText,bool	font: setItalic(text`gensym6: StyleText; val`gensym6: bool)	
setItalic	nodesnim/core/font.html#setItalic,StyleText,int,bool	font: setItalic(text`gensym6: StyleText; index`gensym6: int; val`gensym6: bool)	
setItalic	nodesnim/core/font.html#setItalic,StyleText,int,int,bool	font: setItalic(text`gensym6: StyleText; s`gensym6, e`gensym6: int; val`gensym6: bool)	
setUnderline	nodesnim/core/font.html#setUnderline,StyleUnicode,bool	font: setUnderline(c`gensym7: StyleUnicode; val`gensym7: bool = true)	
setUnderline	nodesnim/core/font.html#setUnderline,StyleText,bool	font: setUnderline(text`gensym7: StyleText; val`gensym7: bool)	
setUnderline	nodesnim/core/font.html#setUnderline,StyleText,int,bool	font: setUnderline(text`gensym7: StyleText; index`gensym7: int; val`gensym7: bool)	
setUnderline	nodesnim/core/font.html#setUnderline,StyleText,int,int,bool	font: setUnderline(text`gensym7: StyleText; s`gensym7, e`gensym7: int;\n             val`gensym7: bool)	
setStrikethrough	nodesnim/core/font.html#setStrikethrough,StyleUnicode,bool	font: setStrikethrough(c`gensym8: StyleUnicode; val`gensym8: bool = true)	
setStrikethrough	nodesnim/core/font.html#setStrikethrough,StyleText,bool	font: setStrikethrough(text`gensym8: StyleText; val`gensym8: bool)	
setStrikethrough	nodesnim/core/font.html#setStrikethrough,StyleText,int,bool	font: setStrikethrough(text`gensym8: StyleText; index`gensym8: int; val`gensym8: bool)	
setStrikethrough	nodesnim/core/font.html#setStrikethrough,StyleText,int,int,bool	font: setStrikethrough(text`gensym8: StyleText; s`gensym8, e`gensym8: int;\n                 val`gensym8: bool)	
setURL	nodesnim/core/font.html#setURL,StyleText,int,int,string,ColorRef	font: setURL(text: StyleText; s, e: int; url: string;\n       color: ColorRef = current_theme ~ url_color)	
setFont	nodesnim/core/font.html#setFont,StyleText,cstring,cint	font: setFont(text: StyleText; font: cstring; size: cint)	
setFont	nodesnim/core/font.html#setFont,StyleText,FontPtr	font: setFont(text: StyleText; font: FontPtr)	
loadFont	nodesnim/core/font.html#loadFont,cstring,cint	font: loadFont(font: cstring; size: cint): FontPtr	
splitLines	nodesnim/core/font.html#splitLines,StyleText	font: splitLines(text: StyleText): seq[StyleText]	
split	nodesnim/core/font.html#split,StyleText,string	font: split(text: StyleText; splitval: string): seq[StyleText]	
getTextSize	nodesnim/core/font.html#getTextSize,StyleText	font: getTextSize(text: StyleText): Vector2Obj	
getCaretPos	nodesnim/core/font.html#getCaretPos,StyleText,uint32	font: getCaretPos(text: StyleText; pos: uint32): tuple[a: Vector2Obj, b: uint16]	
getPosUnderPoint	nodesnim/core/font.html#getPosUnderPoint,StyleText,Vector2Obj,Vector2Obj,AnchorObj	font: getPosUnderPoint(text: StyleText; global_pos, text_pos: Vector2Obj;\n                 text_align: AnchorObj = Anchor(0, 0, 0, 0)): uint32	
getCharUnderPoint	nodesnim/core/font.html#getCharUnderPoint,StyleText,Vector2Obj,Vector2Obj,AnchorObj	font: getCharUnderPoint(text: StyleText; global_pos, text_pos: Vector2Obj;\n                  text_align: AnchorObj = Anchor(0, 0, 0, 0)): tuple[\n    c: StyleUnicode, pos: uint32]	
renderSurface	nodesnim/core/font.html#renderSurface,StyleText,AnchorObj	font: renderSurface(text: StyleText; align: AnchorObj): SurfacePtr	
render	nodesnim/core/font.html#render,StyleText,Vector2Obj,AnchorObj	font: render(text: StyleText; size: Vector2Obj; align: AnchorObj)	
renderTo	nodesnim/core/font.html#renderTo,StyleText,Vector2Obj,Vector2Obj,AnchorObj	font: renderTo(text: StyleText; pos, size: Vector2Obj; align: AnchorObj)	
freeMemory	nodesnim/core/font.html#freeMemory,StyleText	font: freeMemory(text: StyleText)	
